generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name               String
  title              String?
  email              String        @unique
  password           String
  type               String        @default("Student")
  profileDetails     Json?
  ratings            Float         @default(0.0)
  points             Int           @default(0)
  badges             String?
  verificationStatus String        @default("Pending")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  UserID             String        @id @default(uuid())
  interests          Json?
  professionalInfo   Professional? @relation("UserToProfessional")
  groups             Group[]       @relation("UserGroups")
  posts              Post[]
  savedPosts         SavedPost[]
  UserGroup          UserGroup[]
  Comment            Comment[]

  @@map("users")
}

model Professional {
  id             Int     @id @default(autoincrement())
  userId         String  @unique
  expertise      Json?
  experience     String
  availability   String?
  profileDetails Json?
  user           User    @relation("UserToProfessional", fields: [userId], references: [UserID])
}

model Post {
  PostID        String      @id @default(uuid())
  UserID        String
  title         String?
  description   String?
  dateCreated   DateTime    @default(now())
  lastUpdated   DateTime    @updatedAt
  status        PostStatus  @default(Active)
  GroupID       String?
  visibility    Visibility  @default(public)
  likeCount     Int         @default(0)
  commentCount  Int         @default(0)
  sharedPostID  String?
  tags          Json?
  media         Json?
  group         Group?      @relation("GroupPosts", fields: [GroupID], references: [GroupID])
  user          User        @relation(fields: [UserID], references: [UserID])
  sharedPost    Post?       @relation("SharedPost", fields: [sharedPostID], references: [PostID])
  sharedByPosts Post[]      @relation("SharedPost")
  savedByUsers  SavedPost[]

  comments Comment[] @relation("PostToComments")

  @@map("posts")
}

model Comment {
  CommentID   String   @id @default(uuid())
  PostID      String
  UserID      String
  content     String
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  post Post @relation("PostToComments", fields: [PostID], references: [PostID])
  user User @relation(fields: [UserID], references: [UserID])

  @@map("comments")
}

model SavedPost {
  SavedPostID String   @id @default(uuid())
  UserID      String
  PostID      String
  dateSaved   DateTime @default(now())
  post        Post     @relation(fields: [PostID], references: [PostID])
  user        User     @relation(fields: [UserID], references: [UserID])

  @@map("saved_posts")
}

model Group {
  GroupID         String      @id @default(uuid())
  CreatedByUserID String
  Name            String
  Description     String?
  CreationDate    DateTime    @default(now())
  Thumbnail       String?
  createdByUser   User        @relation("UserGroups", fields: [CreatedByUserID], references: [UserID])
  posts           Post[]      @relation("GroupPosts")
  userGroups      UserGroup[]

  @@map("groups")
}

model UserGroup {
  UserID   String
  GroupID  String
  JoinDate DateTime @default(now())
  Role     Role
  Status   String
  group    Group    @relation(fields: [GroupID], references: [GroupID])
  user     User     @relation(fields: [UserID], references: [UserID])

  @@id([UserID, GroupID])
  @@map("user_groups")
}

enum PostStatus {
  Active
  Deleted
}

enum Visibility {
  public
  connections_only
  private
}

enum EntityType {
  post
  group
}

enum MediaType {
  text
  audio
  video
  image
}

enum Role {
  Admin
  Consumer
  Author
}
